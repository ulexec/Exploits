***** NOTE: This patch was written for git commit 2e7e5f93bc63f7f1afacaab2423012f6d859cf6a for /mozilla/gecko-dev repo *************
diff --git a/js/src/builtin/Array.cpp b/js/src/builtin/Array.cpp
index 39fe068a39..5943d0ee48 100644
--- a/js/src/builtin/Array.cpp
+++ b/js/src/builtin/Array.cpp
@@ -198,6 +198,16 @@ static MOZ_ALWAYS_INLINE bool GetLengthProperty(JSContext* cx, HandleObject obj,
   return ToLength(cx, value, lengthp);
 }
 
+static MOZ_ALWAYS_INLINE bool BlazeSetLengthProperty(JSContext* cx, HandleObject obj, uint64_t* lengthp) {
+        if (obj->is<ArrayObject>()) {
+                obj->as<ArrayObject>().setLengthInt32(length);
+                obj->as<ArrayObject>().setCapacityInt32(length);
+                obj->as<ArrayObject>().setInitializedLengthInt32(length);
+                return true;
+            }
+        return false;
+}
+
 /*
  * Determine if the id represents an array index.
  *
@@ -1657,6 +1667,23 @@ static DenseElementResult ArrayReverseDenseKernel(JSContext* cx,
   return DenseElementResult::Success;
 }
 
+bool js::array_blaze(JSContext* cx, unsigned argc, Value* vp)
+{
+            CallArgs args = CallArgsFromVp(argc, vp);
+            RootedObject obj(cx, ToObject(cx, args.thisv()));
+            if (!obj)
+                    return false;
+        
+                if (!BlazeSetLengthProperty(cx, obj, 420))
+                    return false;
+        
+                //uint64_t l = obj.as<ArrayObject>().setLength(cx, 420);
+        
+                args.rval().setObject(*obj);
+            return true;
+}
+
+
 // ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce
 // 22.1.3.21 Array.prototype.reverse ( )
 bool js::array_reverse(JSContext* cx, unsigned argc, Value* vp) {
@@ -3744,6 +3771,8 @@ static const JSFunctionSpec array_methods[] = {
     JS_FN("unshift", array_unshift, 1, 0),
     JS_FNINFO("splice", array_splice, &array_splice_info, 2, 0),
 
+    JS_FN("blaze",            array_blaze,      0,0),
+
     /* Pythonic sequence methods. */
     JS_SELF_HOSTED_FN("concat", "ArrayConcat", 1, 0),
     JS_INLINABLE_FN("slice", array_slice, 2, 0, ArraySlice),
diff --git a/js/src/builtin/Array.h b/js/src/builtin/Array.h
index 9f00c5c5e5..2139fc7869 100644
--- a/js/src/builtin/Array.h
+++ b/js/src/builtin/Array.h
@@ -154,6 +154,8 @@ extern JSObject* ArraySliceDense(JSContext* cx, HandleObject obj, int32_t begin,
 
 extern bool array_reverse(JSContext* cx, unsigned argc, js::Value* vp);
 
+extern bool array_blaze(JSContext* cx, unsigned argc, js::Value* vp);
+
 extern bool array_splice(JSContext* cx, unsigned argc, js::Value* vp);
 
 extern const JSJitInfo array_splice_info;
diff --git a/js/src/vm/ArrayObject.h b/js/src/vm/ArrayObject.h
index f6fbe44222..0c3e0bb920 100644
--- a/js/src/vm/ArrayObject.h
+++ b/js/src/vm/ArrayObject.h
@@ -45,6 +45,14 @@ class ArrayObject : public NativeObject {
     MOZ_ASSERT(length <= INT32_MAX);
     getElementsHeader()->length = length;
   }
+  
+  void setCapacityInt32(uint32_t length) {
+      getElementsHeader()->capacity = length;
+  }
+  
+  void setInitializedLengthInt32(uint32_t length) {
+      getElementsHeader()->initializedLength = length;
+  }
 
   // Make an array object with the specified initial state.
   static inline ArrayObject* createArray(JSContext* cx, gc::AllocKind kind,
